Submodule Source/Community/Frameworks/swift-markdown-ui contains modified content
diff --git a/Source/Community/Frameworks/swift-markdown-ui/Sources/MarkdownUI/Parser/BlockNode.swift b/Source/Community/Frameworks/swift-markdown-ui/Sources/MarkdownUI/Parser/BlockNode.swift
index 4686106..d4a559c 100644
--- a/Source/Community/Frameworks/swift-markdown-ui/Sources/MarkdownUI/Parser/BlockNode.swift
+++ b/Source/Community/Frameworks/swift-markdown-ui/Sources/MarkdownUI/Parser/BlockNode.swift
@@ -1,6 +1,6 @@
 import Foundation
 
-enum BlockNode: Hashable {
+public enum BlockNode: Hashable, Codable {
   case blockquote(children: [BlockNode])
   case bulletedList(isTight: Bool, items: [RawListItem])
   case numberedList(isTight: Bool, start: Int, items: [RawListItem])
@@ -14,7 +14,7 @@ enum BlockNode: Hashable {
 }
 
 extension BlockNode {
-  var children: [BlockNode] {
+  public var children: [BlockNode] {
     switch self {
     case .blockquote(let children):
       return children
@@ -35,26 +35,26 @@ extension BlockNode {
   }
 }
 
-struct RawListItem: Hashable {
-  let children: [BlockNode]
+public struct RawListItem: Hashable, Codable {
+  public let children: [BlockNode]
 }
 
-struct RawTaskListItem: Hashable {
-  let isCompleted: Bool
-  let children: [BlockNode]
+public struct RawTaskListItem: Hashable, Codable {
+  public let isCompleted: Bool
+  public let children: [BlockNode]
 }
 
-enum RawTableColumnAlignment: Character {
+public enum RawTableColumnAlignment: Character, Codable {
   case none = "\0"
   case left = "l"
   case center = "c"
   case right = "r"
 }
 
-struct RawTableRow: Hashable {
-  let cells: [RawTableCell]
+public struct RawTableRow: Hashable, Codable {
+  public let cells: [RawTableCell]
 }
 
-struct RawTableCell: Hashable {
-  let content: [InlineNode]
+public struct RawTableCell: Hashable, Codable {
+  public let content: [InlineNode]
 }
diff --git a/Source/Community/Frameworks/swift-markdown-ui/Sources/MarkdownUI/Parser/InlineNode.swift b/Source/Community/Frameworks/swift-markdown-ui/Sources/MarkdownUI/Parser/InlineNode.swift
index 390a8f0..4e84a28 100644
--- a/Source/Community/Frameworks/swift-markdown-ui/Sources/MarkdownUI/Parser/InlineNode.swift
+++ b/Source/Community/Frameworks/swift-markdown-ui/Sources/MarkdownUI/Parser/InlineNode.swift
@@ -1,6 +1,6 @@
 import Foundation
 
-enum InlineNode: Hashable, Sendable {
+public enum InlineNode: Hashable, Sendable, Codable {
   case text(String)
   case softBreak
   case lineBreak
@@ -14,7 +14,7 @@ enum InlineNode: Hashable, Sendable {
 }
 
 extension InlineNode {
-  var children: [InlineNode] {
+  public var children: [InlineNode] {
     get {
       switch self {
       case .emphasis(let children):
diff --git a/Source/Community/Frameworks/swift-markdown-ui/Sources/MarkdownUI/Parser/MarkdownParser.swift b/Source/Community/Frameworks/swift-markdown-ui/Sources/MarkdownUI/Parser/MarkdownParser.swift
index 76bbd19..c504177 100644
--- a/Source/Community/Frameworks/swift-markdown-ui/Sources/MarkdownUI/Parser/MarkdownParser.swift
+++ b/Source/Community/Frameworks/swift-markdown-ui/Sources/MarkdownUI/Parser/MarkdownParser.swift
@@ -1,6 +1,6 @@
 import Foundation
-@_implementationOnly import cmark_gfm
-@_implementationOnly import cmark_gfm_extensions
+import cmark_gfm
+import cmark_gfm_extensions
 
 extension Array where Element == BlockNode {
   init(markdown: String) {
@@ -30,7 +30,7 @@ extension Array where Element == BlockNode {
 }
 
 extension BlockNode {
-  fileprivate init?(unsafeNode: UnsafeNode) {
+  public init?(unsafeNode: UnsafeNode) {
     switch unsafeNode.nodeType {
     case .blockquote:
       self = .blockquote(children: unsafeNode.children.compactMap(BlockNode.init(unsafeNode:)))
@@ -122,7 +122,7 @@ extension RawTableCell {
 }
 
 extension InlineNode {
-  fileprivate init?(unsafeNode: UnsafeNode) {
+  public init?(unsafeNode: UnsafeNode) {
     switch unsafeNode.nodeType {
     case .text:
       self = .text(unsafeNode.literal ?? "")
@@ -157,7 +157,7 @@ extension InlineNode {
   }
 }
 
-private typealias UnsafeNode = UnsafeMutablePointer<cmark_node>
+public typealias UnsafeNode = UnsafeMutablePointer<cmark_node>
 
 extension UnsafeNode {
   fileprivate var nodeType: NodeType {
@@ -168,7 +168,7 @@ extension UnsafeNode {
     return nodeType
   }
 
-  fileprivate var children: UnsafeNodeSequence {
+  public var children: UnsafeNodeSequence {
     .init(cmark_node_first_child(self))
   }
 
@@ -457,15 +457,15 @@ private enum NodeType: String {
   case taskListItem = "tasklist"
 }
 
-private struct UnsafeNodeSequence: Sequence {
-  struct Iterator: IteratorProtocol {
+public struct UnsafeNodeSequence: Sequence {
+  public struct Iterator: IteratorProtocol {
     private var node: UnsafeNode?
 
     init(_ node: UnsafeNode?) {
       self.node = node
     }
 
-    mutating func next() -> UnsafeNode? {
+    public mutating func next() -> UnsafeNode? {
       guard let node else { return nil }
       defer { self.node = cmark_node_next(node) }
       return node
@@ -478,7 +478,7 @@ private struct UnsafeNodeSequence: Sequence {
     self.node = node
   }
 
-  func makeIterator() -> Iterator {
+  public func makeIterator() -> Iterator {
     .init(self.node)
   }
 }
